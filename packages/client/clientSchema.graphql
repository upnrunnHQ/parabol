extend interface NewMeeting {
  localPhase: NewMeetingPhase!
  localStage: NewMeetingStage!
  showSidebar: Boolean!
  isAnonymousComment: Boolean
  replyingToCommentId: String
}

extend type ActionMeeting {
  localPhase: NewMeetingPhase!
  localStage: NewMeetingStage!
  showSidebar: Boolean!
}

type ParabolSearchQuery {
  id: String!
  queryString: String
  statusFilters: [TaskStatusEnum!]
}

extend type PokerMeeting {
  isCommentUnread: Boolean!
  isRightDrawerOpen: Boolean!
  localPhase: NewMeetingPhase!
  localStage: NewMeetingStage!
  showSidebar: Boolean!
  jiraSearchQuery: JiraSearchQuery!
  parabolSearchQuery: ParabolSearchQuery!
}

extend type RetrospectiveMeeting {
  isAnonymousComment: Boolean
  isViewerDragInProgress: Boolean
  localPhase: NewMeetingPhase!
  localStage: NewMeetingStage!
  showSidebar: Boolean!
}

extend type Team {
  teamMemberFilter: TeamMember
}

extend type User {
  # If positive, client clock is ahead of server clock by this many ms
  clientClockOffset: Int
  dashSearch: String
  pageName: String
  snackbarOffset: Int
}

extend type Task {
  error: String
  contentText: String
}

extend type RetroReflectionGroup {
  isExpanded: Boolean
}

extend type RetroReflection {
  isViewerDragging: Boolean
  isDropping: Boolean
  remoteDrag: RemoteReflectionDrag
  ignoreDragStarts: [ID!]
  isEditing: Boolean
}

extend type ReflectPrompt {
  editorIds: [ID!]
}

extend interface NewMeetingStage {
  localScheduledEndTime: String
}

extend type CheckInStage {
  localScheduledEndTime: String
}

extend type GenericMeetingStage {
  localScheduledEndTime: String
}

extend type RetroDiscussStage {
  localScheduledEndTime: String
}

extend type UpdatesStage {
  localScheduledEndTime: String
}

extend type AgendaItemsStage {
  localScheduledEndTime: String
}

extend type EstimateStage {
  finalScoreError: String
}
